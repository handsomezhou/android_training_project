!SESSION 2014-03-18 09:10:35.734 -----------------------------------------------
eclipse.buildId=v22.3.0-887826
java.version=1.7.0_45
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=zh_CN
Framework arguments:  -product com.android.ide.eclipse.adt.package.product
Command-line arguments:  -os win32 -ws win32 -arch x86 -product com.android.ide.eclipse.adt.package.product

This is a continuation of log file D:\My Documents\GitHub\work\android_training_project\.metadata\.bak_1.log
Created Time: 2014-03-18 14:31:05.203

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.203
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.203
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.203
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.203
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.203
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.203
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.203
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.203
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.203
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.218
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.218
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.218
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.218
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.218
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.218
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.406
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.406
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.406
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.531
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.531
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.531
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.640
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.640
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.640
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.656
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.656
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.656
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.656
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.656
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.656
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.671
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.671
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.671
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.687
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.687
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.687
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.687
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.687
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.687
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.687
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.687
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.687
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.703
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.703
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.703
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.718
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.718
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.718
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.718
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.718
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.718
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.734
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.734
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.734
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.734
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIIY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.734
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.734
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.734
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.734
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.734
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.750
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.750
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.750
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.750
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.750
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.750
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.765
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.765
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.765
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.765
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.765
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.765
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.765
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.765
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.765
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.781
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.781
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.781
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.781
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.781
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.781
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.796
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.796
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.796
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.796
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.796
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.796
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.812
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.812
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.812
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.812
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.812
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.812
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.828
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.828
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.828
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.828
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.828
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.828
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.843
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.843
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.843
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.843
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.843
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.859
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.859
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.859
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.859
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.875
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.875
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.875
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:05.875
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockIINY -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:05.875
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:05.875
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.515
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.515
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.515
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.609
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.609
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.609
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.609
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.609
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.609
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.625
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.625
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.625
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.625
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.625
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.625
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.625
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.640
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.640
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.640
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.640
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.640
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.656
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.656
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.656
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.656
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.656
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.671
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.671
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.671
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.671
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.671
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.671
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.671
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.687
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2014-03-18 14:31:08.687
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2014-03-18 14:31:08.687
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2014-03-18 14:31:08.687
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.tetris.object;

import android.content.Context;

public class GameConfig {

	/* 定义俄罗斯方块7种方块类型 */
	// public enum BlockType {
	// BLOCK_I, BLOCK_J, BLOCK_L, BLOCK_O, BLOCK_S, BLOCK_Z, BLOCK_T, _TYPE
	// }
	public class BlockType {
		public static final int BLOCK_I = 0;
		public static final int BLOCK_J = 1;
		public static final int BLOCK_L = 2;
		public static final int BLOCK_O = 3;
		public static final int BLOCK_S = 4;
		public static final int BLOCK_Z = 5;
		public static final int BLOCK_T = 6;
		public static final int BLOCK_TYPE = 7;
	}

	/* 俄罗斯方块中方块总类型数目 */
	public static final int BLOCK_TYPE_NUM = 7;

	public static final int BLOCK_WIDTH = 4;
	public static final int BLOCK_HEIGHT = 4;
	/* 俄罗斯方块每个方块的具体数目 */
	public static final int BLOCK_I_NUM = 2;
	public static final int BLOCK_J_NUM = 4;
	public static final int BLOCK_L_NUM = 4;
	public static final int BLOCK_O_NUM = 1;
	public static final int BLOCK_S_NUM = 2;
	public static final int BLOCK_Z_NUM = 2;
	public static final int BLOCK_T_NUM = 4;
	public final int BLOCK_SINGLE_MAX_NUM = 4;

	/* 俄罗斯方块中方块总数目 */
	public static final int BLOCK_TOTAL_NUM = 19; /*
												 * BLOCK_I_NUM+...+BLOCK_T_NUM
												 */
	/* 将俄罗斯方块中方块编号:BLOCK_X_START_NUM~BLOCK_X_NUM-1 代表X类型的方块所属编号 */
	public static final int BLOCK_I_START_NUM = 0;
	public static final int BLOCK_J_START_NUM = (BLOCK_I_START_NUM + BLOCK_I_NUM);
	public static final int BLOCK_L_START_NUM = (BLOCK_J_START_NUM + BLOCK_J_NUM);
	public static final int BLOCK_O_START_NUM = (BLOCK_L_START_NUM + BLOCK_L_NUM);
	public static final int BLOCK_S_START_NUM = (BLOCK_O_START_NUM + BLOCK_O_NUM);
	public static final int BLOCK_Z_START_NUM = (BLOCK_S_START_NUM + BLOCK_S_NUM);
	public static final int BLOCK_T_START_NUM = (BLOCK_Z_START_NUM + BLOCK_Z_NUM);

	public final int BLOCK_I0_MIN_X = 2;
	public final int BLOCK_I0_MIN_Y = 1;
	public final int BLOCK_I0_MAX_X = 2;
	public final int BLOCK_I0_MAX_Y = 4;

	public final int BLOCK_I1_MIN_X = 1;
	public final int BLOCK_I1_MIN_Y = 2;
	public final int BLOCK_I1_MAX_X = 4;
	public final int BLOCK_I1_MAX_Y = 2;

	public final int BLOCK_J0_MIN_X = 2;
	public final int BLOCK_J0_MIN_Y = 1;
	public final int BLOCK_J0_MAX_X = 3;
	public final int BLOCK_J0_MAX_Y = 3;

	public final int BLOCK_J1_MIN_X = 1;
	public final int BLOCK_J1_MAX_X = 3;
	public final int BLOCK_J1_MIN_Y = 1;
	public final int BLOCK_J1_MAX_Y = 2;
	public final int BLOCK_J2_MIN_X = 2;
	public final int BLOCK_J2_MIN_Y = 1;
	public final int BLOCK_J2_MAX_X = 3;
	public final int BLOCK_J2_MAX_Y = 3;

	public final int BLOCK_J3_MIN_X = 1;
	public final int BLOCK_J3_MIN_Y = 2;
	public final int BLOCK_J3_MAX_X = 3;
	public final int BLOCK_J3_MAX_Y = 3;

	public final int BLOCK_L0_MIN_X = 2;
	public final int BLOCK_L0_MIN_Y = 1;
	public final int BLOCK_L0_MAX_X = 3;
	public final int BLOCK_L0_MAX_Y = 3;

	public final int BLOCK_L1_MIN_X = 1;
	public final int BLOCK_L1_MIN_Y = 2;
	public final int BLOCK_L1_MAX_X = 3;
	public final int BLOCK_L1_MAX_Y = 3;

	public final int BLOCK_L2_MIN_X = 1;
	public final int BLOCK_L2_MIN_Y = 1;
	public final int BLOCK_L2_MAX_X = 2;
	public final int BLOCK_L2_MAX_Y = 3;

	public final int BLOCK_L3_MIN_X = 1;
	public final int BLOCK_L3_MIN_Y = 1;
	public final int BLOCK_L3_MAX_X = 3;
	public final int BLOCK_L3_MAX_Y = 2;

	public final int BLOCK_O0_MIN_X = 2;
	public final int BLOCK_O0_MIN_Y = 2;
	public final int BLOCK_O0_MAX_X = 3;
	public final int BLOCK_O0_MAX_Y = 3;

	public final int BLOCK_S0_MIN_X = 1;
	public final int BLOCK_S0_MIN_Y = 1;
	public final int BLOCK_S0_MAX_X = 3;
	public final int BLOCK_S0_MAX_Y = 2;

	public final int BLOCK_S1_MIN_X = 2;
	public final int BLOCK_S1_MIN_Y = 1;
	public final int BLOCK_S1_MAX_X = 3;
	public final int BLOCK_S1_MAX_Y = 3;

	public final int BLOCK_Z0_MIN_X = 1;
	public final int BLOCK_Z0_MIN_Y = 1;
	public final int BLOCK_Z0_MAX_X = 3;
	public final int BLOCK_Z0_MAX_Y = 2;

	public final int BLOCK_Z1_MIN_X = 2;
	public final int BLOCK_Z1_MIN_Y = 1;
	public final int BLOCK_Z1_MAX_X = 3;
	public final int BLOCK_Z1_MAX_Y = 3;

	public final int BLOCK_T0_MIN_X = 1;
	public final int BLOCK_T0_MIN_Y = 1;
	public final int BLOCK_T0_MAX_X = 3;
	public final int BLOCK_T0_MAX_Y = 2;

	public final int BLOCK_T1_MIN_X = 2;
	public final int BLOCK_T1_MIN_Y = 1;
	public final int BLOCK_T1_MAX_X = 3;
	public final int BLOCK_T1_MAX_Y = 3;

	public final int BLOCK_T2_MIN_X = 1;
	public final int BLOCK_T2_MIN_Y = 2;
	public final int BLOCK_T2_MAX_X = 3;
	public final int BLOCK_T2_MAX_Y = 3;

	public final int BLOCK_T3_MIN_X = 1;
	public final int BLOCK_T3_MIN_Y = 1;
	public final int BLOCK_T3_MAX_X = 2;
	public final int BLOCK_T3_MAX_Y = 3;

	private static final int BLOCK_TYPE_INIT = BlockType.BLOCK_TYPE;
	private static final char GRID_VALUE_1 = '1';
	private static final char GRID_VALUE_0 = '0';
	/* 俄罗斯方块界面的长和宽by default */
	private static final int TETRIS_HEIGHT = 20;
	private static final int TETRIS_WIDTH = 10;

	private static final char[][] block = {// [BLOCK_TOTAL_NUM][BLOCK_HEIGHT*BLOCK_WIDTH+1]
			// BLOCK_I
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'1', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_J
			{ '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_L
			{ '0', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '1', '1', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_O
			{ '0', '0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_S
			{ '0', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_Z
			{ '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },
			// BLOCK_T
			{ '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

			{ '0', '1', '0', '0', '1', '1', '0', '0', '0', '1', '0', '0', '0',
					'0', '0', '0', '\0', },

	};

	public final int TTRS_SUCCEED = 0;
	public final int TTRS_FAILED = -1;

	/* 初始化Block */
	public final int BLOCK_INIT_X = 0;
	public final int BLOCK_INIT_Y = 0;
	public final int BLOCK_ERROR_TYPE = -1;
	public final int BLOCK_ERROR_NUM = -1;

	public final int curBlockINIT_Y -3
	#define curBlockInitX	((TETRIS_WIDTH-GRID_LEN)/2+1)
	
	public enum GameStatus {
		STATUS_INIT, STATUS_PLAYING, STATUS_PAUSE, STATUS_QUIT
	}

	/* 游戏状态 */
	public GameStatus gameStatus;
	/* 游戏等级 */
	private int gameLevel;
	/* 游戏分数 */
	private int gameScore;
	// Block[y][x]数组第一二维的长度
	private int xSize;
	private int ySize;
	// Board中第一张图片出现的x座标与y座标
	private int beginImageX;
	private int beginImageY;
	// Block 小方块图片的宽和高
	private int imageWidth;
	private int imageHeight;

	// CurBlock 第一次出现的位置
	private int curBlockInitY;
	private int curBlockInitX;

	private Context context;

	public GameConfig(int beginImageY, int beginImageX, int imageHeight,
			int imageWidth, Context context) {
		this.ySize = TETRIS_HEIGHT;
		this.xSize = TETRIS_WIDTH;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	/**
	 * 
	 * @param tetrisHeight
	 *            俄罗斯方块的高(行)
	 * @param tetrisWidth
	 *            俄罗斯方块的宽度(列)
	 * @param beginImageY
	 *            最左上角显示的小方块,相对于方块显示区域的Y偏移量
	 * @param beginImageX
	 *            最左上角显示的小方块,相对于方块显示区域的X偏移量
	 * @param imageHeight
	 *            小方块的高
	 * @param imageWidth
	 *            小方块的宽
	 * @param context
	 */
	public GameConfig(int tetrisHeight, int tetrisWidth, int beginImageY,
			int beginImageX, int imageHeight, int imageWidth, Context context) {
		this.gameStatus = GameStatus.STATUS_INIT;
		this.gameLevel = 1;
		this.gameScore = 0;
		this.ySize = tetrisHeight;
		this.xSize = tetrisWidth;
		this.beginImageY = beginImageY;
		this.beginImageX = beginImageX;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
		this.context = context;
	}

	public void setGameStatus(GameStatus gameStatus) {
		this.gameStatus = gameStatus;
	}

	public GameStatus getGameStatus() {
		return this.gameStatus;
	}

	public void setGameLevel(int gameLevel) {
		this.gameLevel = gameLevel;
	}

	public int getGameLevel() {
		return this.gameLevel;
	}

	public void setGameScore(int gameScore) {
		this.gameScore = gameScore;
	}

	public int getGameScore() {
		return this.gameScore;
	}

	public int getBlockTypeNUM() {
		return BLOCK_TYPE_NUM;
	}

	public int getBlockHeight() {
		return BLOCK_HEIGHT;
	}

	public int getBlockWidth() {
		return BLOCK_WIDTH;
	}

	public int getBlockInitType() {

		return BLOCK_TYPE_INIT;
	}

	public char getValueOne() {
		return GRID_VALUE_1;
	}

	public char getValueZero() {
		return GRID_VALUE_0;
	}

	public char[] getBlocks(int index) {
		return block[index];
	}

	/*
	 * public char[] copyBlockData(char[] dst, char[] scr, int size) { for (int
	 * i = 0; i < size; i++) { dst[i] = scr[i]; }
	 * 
	 * return dst; }
	 */

	public void setXSize(int xSize) {
		this.xSize = xSize;
	}

	public int getXSize() {
		return this.xSize;
	}

	public void setYSize(int ySize) {
		this.ySize = ySize;
	}

	public int getYSize() {
		return this.ySize;
	}

	public void setBeginImageY(int beginImageY) {
		this.beginImageY = beginImageY;
	}

	public int getBeginImageY() {
		return this.beginImageY;
	}

	public void setBeginImageX(int beginImageX) {
		this.beginImageX = beginImageX;
	}

	public int getBeginImageX() {
		return this.beginImageX;
	}

	public void setImageWidth(int imageWidth) {
		this.imageWidth = imageWidth;
	}

	public int getImageWidth() {
		return this.imageWidth;
	}

	public void setImageHeight(int imageHeight) {
		this.imageHeight = imageHeight;
	}

	public int getImageHeight() {
		return this.imageHeight;
	}

	public void setCurBlockInitY(int curBlockInitY) {
		this.curBlockInitY = curBlockInitY;
	}

	public int getCurBlockInitY() {
		return this.curBlockInitY;
	}

	public void setCurBlockInitX(int curBlockInitX) {
		this.curBlockInitX = curBlockInitX;
	}

	public int getCurBlockInitX() {
		return this.curBlockInitX;
	}

	public Context getContext() {
		return context;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1396)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:246)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToEnumDeclaration(ASTConverter.java:2853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2594)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2426)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
